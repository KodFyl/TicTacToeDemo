{"version":3,"sources":["Playboard.js","Result.js","utils/findWinner.js","utils/checkIfGameEnded.js","App.js","serviceWorker.js","index.js"],"names":["Cell","onClick","children","className","Playboard","gameState","onClickCell","useState","currentPlayer","setCurrentPlayer","handleCellClick","cellIndex","map","cellContent","index","Result","winner","onPlayAgain","message","WINNER_POSITIONS","findWinner","some","position","firstItemIndex","secondItemIndex","thirdItemIndex","referenceItem","checkIfGameEnded","every","cellState","GAME_STATUS","initialGameState","Array","fill","App","setGameState","gameStatus","setGameStatus","gameWinner","useRef","useEffect","current","player","nextGameState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yRA8BMA,G,YAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACX,yBAAKC,UAAU,OAAOF,QAASA,GAC5BC,KAIUE,EAjCG,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAAkB,EACNC,mBAAS,KADH,mBACzCC,EADyC,KAC1BC,EAD0B,KAQhD,SAASC,EAAgBC,GACnBN,EAAUM,KACdL,EAAYK,EAAWH,GALvBC,EADqC,MAAlBD,EAAwB,IAAM,MAUnD,OACE,yBAAKL,UAAU,aACb,2CACA,6CAAeK,EAAf,YACA,yBAAKL,UAAU,aACZE,EAAUO,KAAI,SAACC,EAAaC,GAAd,OACb,kBAAC,EAAD,CAAMb,QAAS,kBAAMS,EAAgBI,KAASD,SCNzCE,G,MAdA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAClBC,EAAUF,EAAM,iBACRA,EADQ,qBAElB,0BACJ,OACE,yBAAKb,UAAU,oBACb,4BAAKe,GACL,4BAAQf,UAAU,gBAAgBF,QAASgB,GAA3C,iBCVAE,EAAmB,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAsBMC,EAnBI,SAAAf,GACjB,IAAIW,EAeJ,OAbAG,EAAiBE,MAAK,SAAAC,GAAa,IAAD,cAC0BA,EAD1B,GACzBC,EADyB,KACTC,EADS,KACQC,EADR,KAE1BC,EAAgBrB,EAAUkB,GAChC,GACEG,GACAA,IAAkBrB,EAAUmB,IAC5BE,IAAkBrB,EAAUoB,GAG5B,OADAT,EAASU,GACF,KAIJV,GCvBMW,EAJU,SAAAtB,GACvB,OAAOA,EAAUuB,OAAM,SAAAC,GAAS,OAAkB,OAAdA,MCMhCC,EACS,cADTA,EAEM,WAGNC,EAAmBC,MAAM,GAAGC,KAAK,MAsCxBC,MApCf,WAAgB,IAAD,EACqB3B,mBAASwB,GAD9B,mBACN1B,EADM,KACK8B,EADL,OAEuB5B,mBAASuB,GAFhC,mBAENM,EAFM,KAEMC,EAFN,KAGPC,EAAaC,mBA0BnB,OAxBAC,qBACE,WACE,IAAMxB,EAASI,EAAWf,GACtBW,GACFsB,EAAWG,QAAUzB,EACrBqB,EAAcP,IACLH,EAAiBtB,IAC1BgC,EAAcP,KAGlB,CAACzB,IAcI+B,IAAeN,EACpB,kBAAC,EAAD,CAAWzB,UAAWA,EAAWC,YAZnC,SAAqBK,EAAW+B,GAC9B,IAAMC,EAAa,YAAOtC,GAC1BsC,EAAchC,GAAa+B,EAC3BP,EAAaQ,MAUXP,IAAeN,EACjB,kBAAC,EAAD,CAAQd,OAAQsB,EAAWG,QAASxB,YARtC,WACEkB,EAAaJ,GACbM,EAAcP,MAOZ,MCnCcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.05d5d4a6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Playboard.css\";\n\nconst Playboard = ({ gameState, onClickCell }) => {\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\n\n  function togglePlayer() {\n    const nextPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\n    setCurrentPlayer(nextPlayer);\n  }\n\n  function handleCellClick(cellIndex) {\n    if (gameState[cellIndex]) return;\n    onClickCell(cellIndex, currentPlayer);\n    togglePlayer();\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Tic Tac Toe</h1>\n      <h2>{`Player ${currentPlayer}\\`s Turn`}</h2>\n      <div className=\"playboard\">\n        {gameState.map((cellContent, index) => (\n          <Cell onClick={() => handleCellClick(index)}>{cellContent}</Cell>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Cell = ({ onClick, children }) => (\n  <div className=\"cell\" onClick={onClick}>\n    {children}\n  </div>\n);\n\nexport default Playboard;\n","import React from \"react\";\nimport \"./Result.css\";\n\nconst Result = ({ winner, onPlayAgain }) => {\n  const message = winner\n    ? `Player ${winner} has won the game`\n    : \"The game ended in a tie\";\n  return (\n    <div className=\"result-container\">\n      <h2>{message}</h2>\n      <button className=\"playagain-btn\" onClick={onPlayAgain}>\n        Play Again\n      </button>\n    </div>\n  );\n};\n\nexport default Result;\n","const WINNER_POSITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\nconst findWinner = gameState => {\n  let winner;\n\n  WINNER_POSITIONS.some(position => {\n    const [firstItemIndex, secondItemIndex, thirdItemIndex] = position;\n    const referenceItem = gameState[firstItemIndex];\n    if (\n      referenceItem &&\n      referenceItem === gameState[secondItemIndex] &&\n      referenceItem === gameState[thirdItemIndex]\n    ) {\n      winner = referenceItem;\n      return true;\n    }\n  });\n\n  return winner;\n};\n\nexport default findWinner;\n","const checkIfGameEnded = gameState => {\n  return gameState.every(cellState => cellState !== null);\n};\n\nexport default checkIfGameEnded;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport Playboard from \"./Playboard\";\nimport Result from \"./Result\";\nimport findWinner from \"./utils/findWinner\";\nimport checkIfGameEnded from \"./utils/checkIfGameEnded\";\n\nconst GAME_STATUS = {\n  IN_PROGRESS: \"IN_PROGRESS\",\n  COMPLETE: \"COMPLETE\"\n};\n\nconst initialGameState = Array(9).fill(null);\n\nfunction App() {\n  const [gameState, setGameState] = useState(initialGameState);\n  const [gameStatus, setGameStatus] = useState(GAME_STATUS.IN_PROGRESS);\n  const gameWinner = useRef();\n\n  useEffect(\n    function watchForWinner() {\n      const winner = findWinner(gameState);\n      if (winner) {\n        gameWinner.current = winner;\n        setGameStatus(GAME_STATUS.COMPLETE);\n      } else if (checkIfGameEnded(gameState)) {\n        setGameStatus(GAME_STATUS.COMPLETE);\n      }\n    },\n    [gameState]\n  );\n\n  function onClickCell(cellIndex, player) {\n    const nextGameState = [...gameState];\n    nextGameState[cellIndex] = player;\n    setGameState(nextGameState);\n  }\n\n  function onPlayAgain() {\n    setGameState(initialGameState);\n    setGameStatus(GAME_STATUS.IN_PROGRESS);\n  }\n\n  return gameStatus === GAME_STATUS.IN_PROGRESS ? (\n    <Playboard gameState={gameState} onClickCell={onClickCell} />\n  ) : gameStatus === GAME_STATUS.COMPLETE ? (\n    <Result winner={gameWinner.current} onPlayAgain={onPlayAgain} />\n  ) : null;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}